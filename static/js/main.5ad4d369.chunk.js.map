{"version":3,"sources":["components/Header/Header.js","components/Figure/Figure.js","components/WorldCount/WorldChart.js","components/Figure/FigureHzt.js","utils/utils.js","components/WorldCount/WorldCount.js","api/api.js","components/CountryCount/AllFigures/AllFigure.js","components/CountryCount/Countries/CountrySelector.js","components/CountryCount/CountryChart/CountryChart.js","components/CountryCount/CountryCount.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Figure","props","data","text","WorldChart","state","chartData","chartOptions","dateWiseCases","Object","keys","dateWiseDeaths","values","dateWiseRecovered","lastNdays","this","setState","labels","datasets","label","backgroundColor","pointBackgroundColor","pointBorderColor","title","display","setDataToChartData","console","log","options","width","height","Component","FigureHzt","isNew","rateOfChange","array","roc","iRoc","i","length","toFixed","WorldCount","overall","Promise","resolve","reject","axios","get","then","res","days","getOverallHistoricalData","cases","deaths","recovered","getOverallDetails","string","Date","toUTCString","active","updated","casesPerOneMillion","activePerOneMillion","affectedCountries","critical","calculateDate","onClick","setLastNDays","AllFigure","country","todayCases","todayDeaths","tests","CountrySelector","getDataOfSelectedCountry","e","document","getElementById","selectedCountry","selectedIndex","value","countrySelectedCallbackFunction","size","id","onChange","countryList","map","ele","key","CountryChart","prepareLastNdaysData","n","slice","selected","historyData","Confirmed","Deaths","Recovered","fontColor","tooltips","mode","getCountryHistoricalData","toLowerCase","CountryCount","countryObj","allCountry","filter","getAllCountry","Footer","href","target","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5ad4d369.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>COVI-DASH</h1>\r\n            <div className=\"nav-links\">\r\n                <Link to=\"/\" className=\"link\">\r\n                    <div>WORLD</div>\r\n                </Link>\r\n                <Link to=\"/country\" className=\"link\">\r\n                    <div>COUNTRY</div>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport './Figure.css'\r\n\r\nfunction Figure(props) {\r\n    return (\r\n        <div className=\"figure\">\r\n            <div className=\"number\">{props.data}</div>\r\n            <div className=\"text\">{props.text}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Figure","import React, { Component } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nclass WorldChart extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            chartData: {},\r\n            chartOptions: {},\r\n            dateWiseCases: Object.keys(this.props.dateWiseCases),\r\n            dateWiseDeaths: Object.values(this.props.dateWiseDeaths),\r\n            dateWiseRecovered: Object.values(this.props.dateWiseRecovered),\r\n            lastNdays: this.props.lastNdays\r\n        }\r\n    }\r\n\r\n    setDataToChartData() {\r\n        this.setState({\r\n            chartData: {\r\n                labels: this.state.dateWiseCases,\r\n                datasets: [\r\n                    {\r\n                        label: 'Cases',\r\n                        data: Object.values(this.props.dateWiseCases),\r\n                        backgroundColor: 'rgba(125, 225, 232,0.6)',\r\n                        pointBackgroundColor: 'rgba(0, 255, 234)',\r\n                        pointBorderColor: 'rgba(91, 94, 91)'\r\n                    },\r\n                    {\r\n                        label: 'Deaths',\r\n                        data: this.state.dateWiseDeaths,\r\n                        backgroundColor: 'rgba(247, 54, 54,0.6)',\r\n                        pointBackgroundColor: 'rgba(247, 54, 54)'\r\n                    },\r\n                    {\r\n                        label: 'Recovered',\r\n                        data: this.state.dateWiseRecovered,\r\n                        backgroundColor: 'rgba(44, 230, 65,0.6)',\r\n                        pointBackgroundColor: 'rgba(0, 255, 81)',\r\n                        pointBorderColor: 'rgba(91, 94, 91)'\r\n                    }\r\n                ]\r\n            },\r\n            chartOptions: {\r\n                title: {\r\n                    display: true,\r\n                    text: `Showing chart for last ${this.state.lastNdays}  days`\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDataToChartData()\r\n    }\r\n\r\n    componentDidUpdate(props) {\r\n        console.log(\"WORLD CHART: PRE PROPS\", props.dateWiseCases)\r\n        console.log(\"WORLD CHART: NEW PROPS\", this.props.dateWiseCases)\r\n        if (props.dateWiseCases !== this.props.dateWiseCases) {\r\n            this.setState({\r\n                ...this.state,\r\n                dateWiseCases: Object.keys(this.props.dateWiseCases),\r\n                dateWiseDeaths: Object.values(this.props.dateWiseDeaths),\r\n                dateWiseRecovered: Object.values(this.props.dateWiseRecovered),\r\n                lastNdays: this.props.lastNdays\r\n            }, () => this.setDataToChartData())\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        console.log(\"WORLD CHART\", Object.keys(this.props.dateWiseCases))\r\n\r\n        return (\r\n            <div className=\"world-chart\">\r\n                <Line\r\n                    data={this.state.chartData}\r\n                    options={this.state.chartOptions}\r\n                    width={800}\r\n                    height={400}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default WorldChart\r\n","import React from 'react'\r\nimport './Figure.css'\r\n\r\nfunction FigureHzt(props){\r\n    return(\r\n        <div className=\"figure-hzt\">\r\n            <div className=\"text-hzt\">{props.text} <span className={props.isNew?\"isNew\":\"notNew\"}>New</span> </div>\r\n            <div className=\"number-hzt\">{props.data}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FigureHzt","\r\nexport const rateOfChange = (array) => {\r\n    console.log(\"ROC Z\",array)\r\n    let roc = 0;\r\n    let iRoc = 0;\r\n    for(let i=0; i<array.length-1;i++){\r\n        iRoc = ((array[i+1]-array[i])/array[i+1])*100\r\n        console.log(\"iROC\",iRoc.toFixed(2))\r\n        roc = roc + iRoc\r\n        console.log(\"ROC\",roc.toFixed(2))\r\n    }\r\n    return (roc/(array.length-1)).toFixed(2)\r\n}","import React, { Component } from 'react'\r\nimport Figure from '../Figure/Figure'\r\nimport './WorldCount.css'\r\nimport { getOverallDetails, getOverallHistoricalData } from '../../api/api';\r\nimport { Line } from 'react-chartjs-2'\r\nimport WorldChart from './WorldChart';\r\nimport FigureHzt from '../Figure/FigureHzt';\r\nimport { rateOfChange } from '../../utils/utils';\r\n\r\nclass WorldCount extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            overall: false,\r\n            dateWiseCases: false,\r\n            dateWiseDeaths: false,\r\n            dateWiseRecovered: false,\r\n            lastNdays: 60\r\n        }\r\n\r\n\r\n    }\r\n\r\n    getOverallDetails() {\r\n        getOverallDetails()\r\n            .then(data => {\r\n                console.log(\"Promise data: overall\", data)\r\n                this.setState({\r\n                    ...this.state,\r\n                    overall: data\r\n                })\r\n            })\r\n    }\r\n\r\n    getOverallHistoricalData(days) {\r\n        getOverallHistoricalData(days)\r\n            .then(data => {\r\n                console.log(\"XXXX Promise data: Overall - Date-wise\", data.cases)\r\n                this.setState({\r\n                    ...this.state,\r\n                    dateWiseCases: data.cases,\r\n                    dateWiseDeaths: data.deaths,\r\n                    dateWiseRecovered: data.recovered\r\n                })\r\n            })\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getOverallDetails();\r\n        this.getOverallHistoricalData(this.state.lastNdays);\r\n    }\r\n\r\n    //util 1 calculate date\r\n    calculateDate(string) {\r\n        return new Date(string).toUTCString()\r\n    }\r\n\r\n    //util 2 fetch data for last several days\r\n    setLastNDays(days) {\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            lastNdays: days\r\n        }, () => this.getOverallHistoricalData(this.state.lastNdays))\r\n    }\r\n\r\n    render() {\r\n\r\n        const { cases,\r\n            deaths,\r\n            recovered,\r\n            active,\r\n            updated,\r\n            casesPerOneMillion,\r\n            activePerOneMillion,\r\n            affectedCountries,\r\n            critical } = this.state.overall\r\n\r\n        console.log(\"RENDER\", Object.keys(this.state.dateWiseCases))\r\n\r\n        return (\r\n            <div className=\"world-dashboard\">\r\n                <h2>World Count</h2>\r\n\r\n                {\r\n                    (this.state.overall && this.state.dateWiseCases) ?\r\n                        <div>\r\n                            <div className=\"world-count-wrapper\">\r\n                                <div>\r\n                                    <div className=\"world-figures\">\r\n                                        <Figure data={cases} text=\"Total Cases\" />\r\n                                        <Figure data={deaths} text=\"Total Deaths\" />\r\n                                        <Figure data={recovered} text=\"Recovered\" />\r\n                                        <Figure data={active} text=\"Active Cases\" />\r\n                                    </div>\r\n                                    <div className=\"timestamp\">*Last Updated on: {this.calculateDate(updated)}</div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"chart-and-other-stats\">\r\n\r\n                                <div className=\"other-stats\">\r\n                                    <FigureHzt data={casesPerOneMillion} text=\"Cases Per One Million\" />\r\n                                    <FigureHzt data={activePerOneMillion} text=\"Active Per One Million\" />\r\n                                    <FigureHzt data={affectedCountries} text=\"Affected Countries\" />\r\n                                    <FigureHzt data={critical} text=\"Critical\" />\r\n                                    <FigureHzt\r\n                                        isNew={true}\r\n                                        data={rateOfChange(Object.values(this.state.dateWiseCases)) + '%'}\r\n                                        text=\"Cases Rate\" />\r\n                                    <FigureHzt\r\n                                        isNew={true}\r\n                                        data={rateOfChange(Object.values(this.state.dateWiseDeaths)) + '%'}\r\n                                        text=\"Death Rate\" />\r\n                                    <FigureHzt\r\n                                        isNew={true}\r\n                                        data={rateOfChange(Object.values(this.state.dateWiseRecovered)) + '%'}\r\n                                        text=\"Recovery Rate\" />\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <WorldChart\r\n                                        dateWiseCases={this.state.dateWiseCases}\r\n                                        dateWiseDeaths={this.state.dateWiseDeaths}\r\n                                        dateWiseRecovered={this.state.dateWiseRecovered}\r\n                                        lastNdays={this.state.lastNdays}\r\n                                    />\r\n                                    <div className=\"buttons\">\r\n                                        <div className=\"button-item\" onClick={() => this.setLastNDays(30)}>30</div>\r\n                                        <div className=\"button-item\" onClick={() => this.setLastNDays(45)}>45</div>\r\n                                        <div className=\"button-item\" onClick={() => this.setLastNDays(60)}>60</div>\r\n                                        <div className=\"button-item\" onClick={() => this.setLastNDays(90)}>90</div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div> :\r\n                        <div className=\"loading\">Loading..</div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WorldCount\r\n","import axios from 'axios'\r\n\r\n//API calls\r\n\r\n//fetching data of all country\r\n\r\nexport const getAllCountry = () => {\r\n    return new Promise(function( resolve, reject){\r\n        axios.get(`https://disease.sh/v2/countries`)\r\n        .then( res => {\r\n            console.log(\" Res from axios getAllCountry\", res)\r\n            resolve(res.data)\r\n        })\r\n    })\r\n}\r\n\r\n//fetching historical data for specific country\r\n\r\nexport const getCountryHistoricalData = (country) => {\r\n    return new Promise(function(resolve, reject){\r\n        axios.get(`https://api.covid19api.com/total/country/${country}`)\r\n        .then( res => {\r\n            console.log(\"Res from axios country - date wise data\")\r\n            resolve(res.data)\r\n        })\r\n    })\r\n}\r\n\r\n//fetching data overall world data\r\n\r\nexport const getOverallDetails = () => {\r\n    return new Promise(function(resolve, reject){\r\n        axios.get(`https://disease.sh/v2/all`)\r\n        .then( res => {\r\n            console.log(\"Res from axios world data\", res)\r\n            resolve(res.data)\r\n        })\r\n    })\r\n}\r\n\r\n//fetching historical world data \r\n\r\nexport const getOverallHistoricalData = (days) => {\r\n    return new Promise(function(resolve, reject){\r\n        axios.get(`https://disease.sh/v2/historical/all?lastdays=${days}`)\r\n        .then( res => {\r\n            console.log(\"Res from axios world data date wise\", res)\r\n            resolve(res.data)\r\n        })\r\n    })\r\n}","import React, { Component } from 'react'\r\nimport Figure from '../../Figure/Figure'\r\nimport './AllFigures.css'\r\nimport FigureHzt from '../../Figure/FigureHzt'\r\n\r\nfunction AllFigure(props) {\r\n\r\n    function calculateDate(string) {\r\n        return new Date(string).toUTCString()\r\n    }\r\n\r\n    return (\r\n        <div className=\"all-figures\">\r\n            <h2>{props.country.country}</h2>\r\n            <div className=\"figures\">\r\n                <FigureHzt data={props.country.cases} text=\"Total Cases\" />\r\n                <FigureHzt data={props.country.deaths} text=\"Total Deaths\" />\r\n                <FigureHzt data={props.country.recovered} text=\"Recovered\" />\r\n                <FigureHzt data={props.country.active} text=\"Active Cases\" />\r\n                <FigureHzt data={props.country.todayCases} text=\"Today Cases\" />\r\n                <FigureHzt data={props.country.todayDeaths} text=\"Today Deaths\" />\r\n                <FigureHzt data={props.country.critical} text=\"Critical\" />\r\n                <FigureHzt data={props.country.tests} text=\"Total Tests\" />\r\n            </div>\r\n            <div className=\"timestamp\">*Last Updated on: {calculateDate(props.country.updated)}</div>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default AllFigure","import React, { Component } from 'react'\r\nimport './CountrySelector.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst countryList = [ \r\n\"Afghanistan\",\r\n\"Albania\",\r\n\"Algeria\",\r\n\"Andorra\",\r\n\"Angola\",\r\n\"Anguilla\",\r\n\"Antigua and Barbuda\",\r\n\"Argentina\",\r\n\"Armenia\",\r\n\"Aruba\",\r\n \"Australia\",\r\n \"Austria\",\r\n \"Azerbaijan\",\r\n \"Bahamas\",\r\n \"Bahrain\",\r\n \"Bangladesh\",\r\n \"Barbados\",\r\n \"Belarus\",\r\n \"Belgium\",\r\n \"Belize\",\r\n \"Benin\",\r\n \"Bermuda\",\r\n \"Bhutan\",\r\n \"Bolivia\",\r\n \"Bosnia\",\r\n \"Botswana\",\r\n \"Brazil\",\r\n \"British Virgin Islands\",\r\n \"Brunei\",\r\n \"Bulgaria\",\r\n \"Burkina Faso\",\r\n \"Burundi\",\r\n \"Cabo Verde\",\r\n \"Cambodia\",\r\n \"Cameroon\",\r\n \"Canada\",\r\n \"Caribbean Net,herlands\",\r\n \"Cayman Islands\",\r\n \"Central African Republic\",\r\n \"Chad\",\r\n \"Channel Islands\",\r\n \"Chile\",\r\n \"China\",\r\n \"Colombia\",\r\n \"Comoros\",\r\n \"Congo\",\r\n \"Costa Rica\",\r\n \"Croatia\",\r\n \"Cuba\",\r\n \"Curaçao\",\r\n \"Cyprus\",\r\n \"Czechia\",\r\n \"Côte d'Ivoire\",\r\n \"DRC\",\r\n \"Denmark\",\r\n \"Diamond Princess\",\r\n \"Djibouti\",\r\n \"Dominica\",\r\n \"Dominican Republic\",\r\n \"Ecuador\",\r\n \"Egypt\",\r\n \"El Salvador\",\r\n \"Equatorial Guinea\",\r\n \"Eritrea\",\r\n \"Estonia\",\r\n \"Ethiopia\",\r\n \"Falkland Islands (Malvinas)\",\r\n \"Faroe Islands\",\r\n \"Fiji\",\r\n \"Finland\",\r\n \"France\",\r\n \"French Guiana\",\r\n \"French Polynesia\",\r\n \"Gabon\",\r\n \"Gambia\",\r\n \"Georgia\",\r\n \"Germany\",\r\n \"Ghana\",\r\n \"Gibraltar\",\r\n \"Greece\",\r\n \"Greenland\",\r\n \"Grenada\",\r\n \"Guadeloupe\",\r\n \"Guatemala\",\r\n \"Guinea\",\r\n \"Guinea-Bissau\",\r\n \"Guyana\",\r\n \"Haiti\",\r\n \"Holy See (Vatican City State)\",\r\n \"Honduras\",\r\n \"Hong Kong\",\r\n \"Hungary\",\r\n \"Iceland\",\r\n \"India\",\r\n \"Indonesia\",\r\n \"Iran\",\r\n \"Iraq\",\r\n \"Ireland\",\r\n \"Isle of Man\",\r\n \"Israel\",\r\n \"Italy\",\r\n\"Jamaica\",\r\n\"Japan\",\r\n\"Jordan\",\r\n\"Kazakhstan\",\r\n\"Kenya\",\r\n\"Kuwait\",\r\n\"Kyrgyzstan\",\r\n\"Lao People's Democratic Republic\",\r\n\"Latvia\",\r\n\"Lebanon\",\r\n\"Lesotho\",\r\n\"Liberia\",\r\n\"Libyan Arab Jamahiriya\",\r\n\"Liechtenstein\",\r\n\"Lithuania\",\r\n\"Luxembourg\",\r\n\"MS Zaandam\",\r\n\"Macao\",\r\n\"Macedonia\",\r\n\"Madagascar\",\r\n\"Malawi\",\r\n\"Malaysia\",\r\n\"Maldives\",\r\n\"Mali\",\r\n\"Malta\",\r\n\"Martinique\",\r\n\"Mauritania\",\r\n\"Mauritius\",\r\n\"Mayotte\",\r\n\"Mexico\",\r\n\"Moldova\",\r\n\"Monaco\",\r\n\"Mongolia\",\r\n\"Montenegro\",\r\n\"Montserrat\",\r\n\"Morocco\",\r\n\"Mozambique\",\r\n\"Myanmar\",\r\n\"Namibia\",\r\n\"Nepal\",\r\n\"Netherlands\",\r\n\"New Caledonia\",\r\n\"New Zealand\",\r\n\"Nicaragua\",\r\n\"Niger\",\r\n\"Nigeria\",\r\n\"Norway\",\r\n\"Oman\",\r\n\"Pakistan\",\r\n\"Palestine\",\r\n\"Panama\",\r\n\"Papua New Guinea\",\r\n\"Paraguay\",\r\n\"Peru\",\r\n\"Philippines\",\r\n\"Poland\",\r\n\"Portugal\",\r\n\"Qatar\",\r\n\"Romania\",\r\n\"Russia\",\r\n\"Rwanda\",\r\n\"Réunion\",\r\n\"S. Korea\",\r\n\"Saint Kitts and Nevis\",\r\n\"Saint Lucia\",\r\n\"Saint Martin\",\r\n\"Saint Pierre Miquelon\",\r\n\"Saint Vincent and the Grenadines\",\r\n\"San Marino\",\r\n\"Sao Tome and Principe\",\r\n\"Saudi Arabia\",\r\n\"Senegal\",\r\n\"Serbia\",\r\n\"Seychelles\",\r\n\"Sierra Leone\",\r\n\"Singapore\",\r\n\"Sint Maarten\",\r\n\"Slovakia\",\r\n\"Slovenia\",\r\n\"Somalia\",\r\n\"South Africa\",\r\n\"South Sudan\",\r\n\"Spain\",\r\n\"Sri Lanka\",\r\n\"St. Barth\",\r\n\"Sudan\",\r\n\"Suriname\",\r\n\"Swaziland\",\r\n\"Sweden\",\r\n\"Switzerland\",\r\n\"Syrian Arab Republic\",\r\n\"Taiwan\",\r\n\"Tajikistan\",\r\n\"Tanzania\",\r\n\"Thailand\",\r\n\"Timor-Leste\",\r\n\"Togo\",\r\n\"Trinidad and Tobago\",\r\n\"Tunisia\",\r\n\"Turkey\",\r\n\"Turks and Caicos Islands\",\r\n\"UAE\",\r\n\"UK\",\r\n\"USA\",\r\n\"Uganda\",\r\n\"Ukraine\",\r\n\"Uruguay\",\r\n\"Uzbekistan\",\r\n\"Venezuela\",\r\n\"Vietnam\",\r\n\"Western Sahara\",\r\n\"Yemen\",\r\n\"Zambia\",\r\n\"Zimbabwe\",\r\n]\r\n\r\n\r\nclass CountrySelector extends Component {\r\n\r\n\r\n    getDataOfSelectedCountry = () => {\r\n        let e = document.getElementById(\"countrySelector\");\r\n        let selectedCountry = e.options[e.selectedIndex].value;\r\n        console.log(\"selectedCountry\", selectedCountry)\r\n        this.props.countrySelectedCallbackFunction(selectedCountry);\r\n\r\n    }\r\n\r\n    render(props) {\r\n        return (\r\n            <div className=\"selector-wrapper\">\r\n                <div className=\"selector\">\r\n                    <select size=\"1\" id=\"countrySelector\" onChange={() => this.getDataOfSelectedCountry()}>\r\n                        {\r\n                            this.props.countryList\r\n                                .map(ele => {\r\n                                    return (\r\n                                        <option key={ele} className=\"country-options\" value={ele}>\r\n                                            {ele}\r\n                                        </option>\r\n                                    )\r\n                                })\r\n                        }\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CountrySelector","import React, { Component } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport { getCountryHistoricalData } from '../../../api/api'\r\n\r\nclass CountryChart extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            chartData: {},\r\n            chartOptions: {},\r\n            selected: this.props.selectedCountry,//name of country for which data is currently represented\r\n            historyData: false,\r\n            lastNdays: 30\r\n        }\r\n    }\r\n\r\n    prepareLastNdaysData = (array, lastNdays) => {\r\n        let n = array.length\r\n        console.log(\"PPPP\", array.slice(n - lastNdays, n))\r\n        return array.slice(n - lastNdays, n)\r\n    }\r\n\r\n    setDataToChartData() {\r\n\r\n        console.log(\"setDataToChartData\", this.state.historyData.map(ele => ele.Confirmed))\r\n        console.log(\"setDataToChartData\", this.state.historyData.map(ele => ele.Deaths))\r\n        console.log(\"setDataToChartData\", this.state.historyData.map(ele => ele.Recovered))\r\n        console.log(\"setDataToChartData\", this.state.historyData.map(ele => ele.Date.slice(0, 10)))\r\n\r\n        this.setState({\r\n            chartData: {\r\n                labels: this.prepareLastNdaysData(this.state.historyData.map(ele => ele.Date.slice(0, 10)), this.state.lastNdays),\r\n                fontColor: 'black',\r\n                datasets: [\r\n                    {\r\n                        label: 'Cases',\r\n                        data: this.prepareLastNdaysData(this.state.historyData.map(ele => ele.Confirmed), this.state.lastNdays),\r\n                        backgroundColor: 'rgba(125, 225, 232,0.6)',\r\n                        pointBackgroundColor: 'rgba(0, 255, 234)',\r\n                        pointBorderColor: 'rgba(91, 94, 91)'\r\n                    },\r\n                    {\r\n                        label: 'Deaths',\r\n                        data: this.prepareLastNdaysData(this.state.historyData.map(ele => ele.Deaths), this.state.lastNdays),\r\n                        backgroundColor: 'rgba(247, 54, 54,0.6)',\r\n                        pointBackgroundColor: 'rgba(247, 54, 54)'\r\n                    },\r\n                    {\r\n                        label: 'Recovered',\r\n                        data: this.prepareLastNdaysData(this.state.historyData.map(ele => ele.Recovered), this.state.lastNdays),\r\n                        backgroundColor: 'rgba(44, 230, 65,0.6)',\r\n                        pointBackgroundColor: 'rgba(0, 255, 81)',\r\n                        pointBorderColor: 'rgba(91, 94, 91)'\r\n                    }\r\n                ]\r\n            },\r\n            chartOptions: {\r\n                title: {\r\n                    display: true,\r\n                    text: `Historical Chart: ${this.state.selected}   Period:last ${this.state.lastNdays} days`,\r\n                    fontColor: 'black'\r\n                },\r\n                tooltips: {\r\n                    mode: 'x'\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    getCountryHistoricalData(country) {\r\n        console.log(\"getCountryHistoricalData Called\")\r\n        getCountryHistoricalData(country)\r\n            .then(data => {\r\n                console.log(\"Promise Data: getCountryHistoricalData\", data)\r\n                // console.log(\"Promise Data: getCountryHistoricalData filter\", data.map(ele => ele.Confirmed))\r\n                // console.log(\"Promise Data: getCountryHistoricalData filter\", data.map(ele => ele.Date))\r\n                this.setState({\r\n                    ...this.state,\r\n                    historyData: data\r\n                }, () => this.setDataToChartData())\r\n            })\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getCountryHistoricalData(this.state.selected.toLowerCase())\r\n        this.prepareLastNdaysData([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5)\r\n    }\r\n\r\n    componentDidUpdate(props) {\r\n        console.log(\"History Data\", this.state.historyData)\r\n        console.log(\"*** PrevProps\", props.selectedCountry)\r\n        console.log(\"*** NewProps\", this.props.selectedCountry)\r\n        if (props.selectedCountry !== this.props.selectedCountry) {\r\n            this.setState({\r\n                ...this.state,\r\n                selected: this.props.selectedCountry\r\n            }, () => this.getCountryHistoricalData(this.state.selected.toLowerCase()))\r\n        }\r\n    }\r\n\r\n    setLastNDays = days => {\r\n        this.setState({\r\n            ...this.state,\r\n            lastNdays: days\r\n        }, () => this.setDataToChartData())\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n        console.log(\"COUNTRY CHART PROPS 2\", this.state.selected)\r\n\r\n        return (\r\n            <div className=\"country-chart\">\r\n                <Line\r\n                    data={this.state.chartData}\r\n                    options={this.state.chartOptions}\r\n                    width={800}\r\n                    height={400}\r\n                />\r\n                <div className=\"buttons\">\r\n                    <div className=\"button-item\" onClick={() => this.setLastNDays(15)}>15</div>\r\n                    <div className=\"button-item\" onClick={() => this.setLastNDays(30)}>30</div>\r\n                    <div className=\"button-item\" onClick={() => this.setLastNDays(45)}>45</div>\r\n                    <div className=\"button-item\" onClick={() => this.setLastNDays(60)}>60</div>\r\n                    <div className=\"button-item\" onClick={() => this.setLastNDays(90)}>90</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CountryChart\r\n\r\n// historyCases: data.map(ele => ele.Confirmed),\r\n//                     historyDeaths: data.map(ele => ele.Deaths),\r\n//                     historyRecovered: data.map(ele => ele.Recovered),\r\n//                     dateLabels: data.map(ele => ele.Date.slice(0, 10))\r\n\r\n// historyCases: false,\r\n//             historyDeaths: false,\r\n//             historyRecovered: false,\r\n//             dateLabels: false","import React, { Component } from 'react'\r\nimport { getAllCountry } from '../../api/api';\r\nimport AllFigure from './AllFigures/AllFigure';\r\nimport CountrySelector from './Countries/CountrySelector';\r\nimport './CountryCount.css'\r\nimport CountryChart from './CountryChart/CountryChart';\r\n\r\n\r\nclass CountryCount extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            allCountry: false,\r\n            selected: 'Afghanistan', // selected country string\r\n            selectedCountry: {}, // selected country object\r\n            countryList: [] // all country list\r\n        }\r\n    }\r\n\r\n    countrySelectedCallbackFunction = (country) => {\r\n        console.log(\"App\", country)\r\n        const countryObj = this.state.allCountry.filter(ele => ele.country === country)\r\n        console.log(\"App\", countryObj)\r\n        this.setState({\r\n            ...this.state,\r\n            selected: country,\r\n            selectedCountry: countryObj[0]\r\n        })\r\n\r\n    }\r\n\r\n\r\n    getAllCountry() {\r\n        getAllCountry()\r\n            .then((data) => {\r\n                //console.log(\"CCCCC Promise Data\", data.map(ele => ele.country))\r\n                this.setState({\r\n                    ...this.state,\r\n                    allCountry: data,\r\n                    selectedCountry: data[0],\r\n                    countryList: data.map(ele => ele.country)\r\n                })\r\n            })\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        this.getAllCountry();\r\n    }\r\n\r\n    render() {\r\n\r\n        //console.log(\"COUNTRY CHART PROPS 1\", this.state.selected)\r\n\r\n        return (\r\n            <div className=\"dashboard-wrapper\">\r\n                <div>Select Country</div>\r\n                <CountrySelector countryList={this.state.countryList}\r\n                    countrySelectedCallbackFunction={this.countrySelectedCallbackFunction} />\r\n                <div className=\"dashboard\">\r\n                    <AllFigure country={this.state.selectedCountry} />\r\n                    <CountryChart selectedCountry={this.state.selected===\"USA\"?\"US\":this.state.selected} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CountryCount","import React from 'react'\r\nimport './Footer.css'\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div className=\"footer\">\r\n            <h3>Covi-Dash Project 1.1.2</h3>\r\n            <div><a className=\"ds\" href=\"https://github.com/NovelCOVID/API\" target=\"_blank\">Data Source</a></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport WorldCount from './components/WorldCount/WorldCount';\nimport CountryCount from './components/CountryCount/CountryCount';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport Footer from './components/Footer/Footer';\n\nclass App extends Component {\n\n\n    render() {\n\n        return (\n            <Router>\n                <div className=\"App\">\n                    <Header />\n                    <Switch>\n                        <Route path={'/'} exact component={WorldCount} />\n                        <Route path={'/country'} exact component={CountryCount} />\n                    </Switch>\n                    <Footer />\n                </div>\n            </Router>\n        );\n    }\n\n\n}\n\nexport default App;\n\n\n// code for date number to date: alert(new Date(1273185387).toUTCString());\n\n/*function countrySelectedCallbackFunction(country){\n  console.log(\"App\",country)\n}\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
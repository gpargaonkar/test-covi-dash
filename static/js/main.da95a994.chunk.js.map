{"version":3,"sources":["components/Header/Header.js","components/Figure/Figure.js","components/WorldCount/WorldChart.js","components/WorldCount/WorldCount.js","api/api.js","components/CountryCount/AllFigures/AllFigure.js","components/CountryCount/Countries/CountrySelector.js","components/CountryCount/CountryChart/CountryChart.js","components/CountryCount/CountryCount.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Figure","props","data","text","WorldChart","state","chartData","this","setState","labels","Object","keys","dateWiseCases","datasets","label","values","backgroundColor","pointBackgroundColor","pointBorderColor","dateWiseDeaths","dateWiseRecovered","setDataToChartData","console","log","Component","WorldCount","overall","Promise","resolve","reject","axios","get","then","res","cases","deaths","recovered","getOverallDetails","getOverallHistoricalData","string","Date","toUTCString","active","updated","calculateDate","AllFigure","country","todayCases","todayDeaths","critical","tests","CountrySelector","getDataOfSelectedCountry","e","document","getElementById","selectedCountry","options","selectedIndex","value","countrySelectedCallbackFunction","size","id","onChange","countryList","map","ele","key","CountryChart","chartOptions","selected","historyData","Confirmed","Deaths","Recovered","slice","title","display","getCountryHistoricalData","toLowerCase","width","height","CountryCount","countryObj","allCountry","filter","getAllCountry","App","path","process","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.da95a994.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.css'\r\n\r\nfunction Header(){\r\n    return(\r\n        <div className=\"header\">\r\n            <h1>COVI-DASH</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport './Figure.css'\r\n\r\nfunction Figure(props) {\r\n    return (\r\n        <div className=\"figure\">\r\n            <div className=\"number\">{props.data}</div>\r\n            <div className=\"text\">{props.text}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Figure","import React, { Component } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nclass WorldChart extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            chartData: {}\r\n        }\r\n    }\r\n\r\n    setDataToChartData() {\r\n        this.setState({\r\n            chartData: {\r\n                labels: Object.keys(this.props.dateWiseCases),\r\n                datasets: [\r\n                    {\r\n                        label: 'Cases',\r\n                        data: Object.values(this.props.dateWiseCases),\r\n                        backgroundColor: 'rgba(125, 225, 232,0.6)',\r\n                        pointBackgroundColor: 'rgba(0, 255, 234)',\r\n                        pointBorderColor: 'rgba(91, 94, 91)'\r\n                    },\r\n                    {\r\n                        label: 'Deaths',\r\n                        data: Object.values(this.props.dateWiseDeaths),\r\n                        backgroundColor: 'rgba(247, 54, 54,0.6)',\r\n                        pointBackgroundColor: 'rgba(247, 54, 54)'\r\n                    },\r\n                    {\r\n                        label: 'Recovered',\r\n                        data: Object.values(this.props.dateWiseRecovered),\r\n                        backgroundColor: 'rgba(44, 230, 65,0.6)',\r\n                        pointBackgroundColor: 'rgba(0, 255, 81)',\r\n                        pointBorderColor: 'rgba(91, 94, 91)'\r\n                    }\r\n                ]\r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDataToChartData()\r\n    }\r\n\r\n    render() {\r\n\r\n        console.log(\"WORLD CHART\", Object.keys(this.props.dateWiseCases))\r\n\r\n        return (\r\n            <div className=\"world-chart\">\r\n                <Line\r\n                    data={this.state.chartData}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default WorldChart","import React, { Component } from 'react'\r\nimport Figure from '../Figure/Figure'\r\nimport './WorldCount.css'\r\nimport { getOverallDetails, getOverallHistoricalData } from '../../api/api';\r\nimport { Line } from 'react-chartjs-2'\r\nimport WorldChart from './WorldChart';\r\n\r\nclass WorldCount extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            overall: false,\r\n            dateWiseCases: false,\r\n            dateWiseDeaths: false,\r\n            dateWiseRecovered: false\r\n        }\r\n\r\n\r\n    }\r\n\r\n    getOverallDetails() {\r\n        getOverallDetails()\r\n            .then(data => {\r\n                console.log(\"Promise data: overall\", data)\r\n                this.setState({\r\n                    ...this.state,\r\n                    overall: data\r\n                })\r\n            })\r\n    }\r\n\r\n    getOverallHistoricalData() {\r\n        getOverallHistoricalData()\r\n            .then(data => {\r\n                console.log(\"Promise data: Overall - Date-wise\", data)\r\n                this.setState({\r\n                    ...this.state,\r\n                    dateWiseCases: data.cases,\r\n                    dateWiseDeaths: data.deaths,\r\n                    dateWiseRecovered: data.recovered\r\n                })\r\n            })\r\n\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        this.getOverallDetails();\r\n        this.getOverallHistoricalData();\r\n    }\r\n\r\n    calculateDate(string) {\r\n        return new Date(string).toUTCString()\r\n    }\r\n\r\n    render() {\r\n\r\n        const { cases, deaths, recovered, active, updated } = this.state.overall\r\n\r\n        console.log(\"date wise cases\", Object.keys(this.state.dateWiseCases))\r\n\r\n        return (\r\n            <div className=\"world-dashboard\">\r\n                <div className=\"world-count-wrapper\">\r\n                    {\r\n                        this.state.overall ?\r\n                            <div>\r\n                                <h1>World Count</h1>\r\n                                <div className=\"world-figures\">\r\n                                    <Figure data={cases} text=\"Total Cases\" />\r\n                                    <Figure data={deaths} text=\"Total Deaths\" />\r\n                                    <Figure data={recovered} text=\"Recovered\" />\r\n                                    <Figure data={active} text=\"Active Cases\" />\r\n                                </div>\r\n                                <div className=\"timestamp\">*Last Updated on: {this.calculateDate(updated)}</div>\r\n                            </div> :\r\n                            <div>\r\n                                <h3>Loading..</h3>\r\n                            </div>\r\n                    }\r\n                </div>\r\n                {\r\n                    this.state.dateWiseCases ?\r\n                        <WorldChart\r\n                            dateWiseCases={this.state.dateWiseCases}\r\n                            dateWiseDeaths={this.state.dateWiseDeaths}\r\n                            dateWiseRecovered={this.state.dateWiseRecovered}\r\n                        /> :\r\n                        <h3>Loading..</h3>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WorldCount","import axios from 'axios'\r\n\r\n//API calls\r\n\r\n//fetching data of all country\r\n\r\nexport const getAllCountry = () => {\r\n    return new Promise(function( resolve, reject){\r\n        axios.get(`https://disease.sh/v2/countries`)\r\n        .then( res => {\r\n            console.log(\" Res from axios getAllCountry\", res)\r\n            resolve(res.data)\r\n        })\r\n    })\r\n}\r\n\r\n//fetching historical data for specific country\r\n\r\nexport const getCountryHistoricalData = (country) => {\r\n    return new Promise(function(resolve, reject){\r\n        axios.get(`https://api.covid19api.com/total/country/${country}`)\r\n        .then( res => {\r\n            console.log(\"Res from axios country - date wise data\")\r\n            resolve(res.data)\r\n        })\r\n    })\r\n}\r\n\r\n//fetching data overall world data\r\n\r\nexport const getOverallDetails = () => {\r\n    return new Promise(function(resolve, reject){\r\n        axios.get(`https://disease.sh/v2/all`)\r\n        .then( res => {\r\n            console.log(\"Res from axios world data\", res)\r\n            resolve(res.data)\r\n        })\r\n    })\r\n}\r\n\r\n//fetching historical world data \r\n\r\nexport const getOverallHistoricalData = () => {\r\n    return new Promise(function(resolve, reject){\r\n        axios.get(`https://disease.sh/v2/historical/all?lastdays=60`)\r\n        .then( res => {\r\n            console.log(\"Res from axios world data date wise\", res)\r\n            resolve(res.data)\r\n        })\r\n    })\r\n}","import React, { Component } from 'react'\r\nimport Figure from '../../Figure/Figure'\r\nimport './AllFigures.css'\r\n\r\nfunction AllFigure(props) {\r\n\r\n    function calculateDate(string) {\r\n        return new Date(string).toUTCString()\r\n    }\r\n\r\n    return (\r\n        <div className=\"all-figures\">\r\n            <h2>{props.country.country}</h2>\r\n            <div className=\"figures\">\r\n                <Figure data={props.country.cases} text=\"Total Cases\" />\r\n                <Figure data={props.country.deaths} text=\"Total Deaths\" />\r\n                <Figure data={props.country.recovered} text=\"Recovered\" />\r\n                <Figure data={props.country.active} text=\"Active Cases\" />\r\n            </div>\r\n            <div className=\"rates\">\r\n                <Figure data={props.country.todayCases} text=\"Today Cases\" />\r\n                <Figure data={props.country.todayDeaths} text=\"Today Deaths\" />\r\n                <Figure data={props.country.critical} text=\"Critical\" />\r\n                <Figure data={props.country.tests} text=\"Total Tests\" />\r\n            </div>\r\n            <div className=\"timestamp\">*Last Updated on: {calculateDate(props.country.updated)}</div>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default AllFigure","import React, { Component } from 'react'\r\nimport './CountrySelector.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nclass CountrySelector extends Component {\r\n\r\n\r\n    getDataOfSelectedCountry = () => {\r\n        let e = document.getElementById(\"countrySelector\");\r\n        let selectedCountry = e.options[e.selectedIndex].value;\r\n        console.log(\"selectedCountry\", selectedCountry)\r\n        this.props.countrySelectedCallbackFunction(selectedCountry);\r\n\r\n    }\r\n\r\n    render(props) {\r\n        return (\r\n            <div className=\"selector-wrapper\">\r\n                <div className=\"selector\">\r\n                    <select size=\"1\" id=\"countrySelector\" onChange={() => this.getDataOfSelectedCountry()}>\r\n                        {\r\n                            this.props.countryList\r\n                                .map(ele => {\r\n                                    return (\r\n                                        <option key={ele} className=\"country-options\" value={ele}>\r\n                                            {ele}\r\n                                        </option>\r\n                                    )\r\n                                })\r\n                        }\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CountrySelector","import React, { Component } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport { getCountryHistoricalData } from '../../../api/api'\r\n\r\nclass CountryChart extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.state = {\r\n            chartData: {},\r\n            chartOptions: {},\r\n            selected: this.props.selectedCountry,//name of country for which data is currently represented\r\n            historyData: false\r\n        }\r\n    }\r\n\r\n    setDataToChartData() {\r\n\r\n        console.log(\"setDataToChartData\",this.state.historyData.map(ele => ele.Confirmed))\r\n        console.log(\"setDataToChartData\",this.state.historyData.map(ele => ele.Deaths))\r\n        console.log(\"setDataToChartData\",this.state.historyData.map(ele => ele.Recovered))\r\n        console.log(\"setDataToChartData\",this.state.historyData.map(ele => ele.Date.slice(0, 10)))\r\n\r\n        this.setState({\r\n            chartData: {\r\n                labels: this.state.historyData.map(ele => ele.Date.slice(0, 10)),\r\n                datasets: [\r\n                    {\r\n                        label: 'Cases',\r\n                        data: this.state.historyData.map(ele => ele.Confirmed),\r\n                        backgroundColor: 'rgba(125, 225, 232,0.6)',\r\n                        pointBackgroundColor: 'rgba(0, 255, 234)',\r\n                        pointBorderColor: 'rgba(91, 94, 91)'\r\n                    },\r\n                    {\r\n                        label: 'Deaths',\r\n                        data: this.state.historyData.map(ele => ele.Deaths),\r\n                        backgroundColor: 'rgba(247, 54, 54,0.6)',\r\n                        pointBackgroundColor: 'rgba(247, 54, 54)'\r\n                    },\r\n                    {\r\n                        label: 'Recovered',\r\n                        data: this.state.historyData.map(ele => ele.Recovered),\r\n                        backgroundColor: 'rgba(44, 230, 65,0.6)',\r\n                        pointBackgroundColor: 'rgba(0, 255, 81)',\r\n                        pointBorderColor: 'rgba(91, 94, 91)'\r\n                    }\r\n                ]\r\n            },\r\n            chartOptions: {\r\n                title: {\r\n                    display: true,\r\n                    text: `Historical Data: ${this.state.selected}`\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    getCountryHistoricalData(country) {\r\n        console.log(\"getCountryHistoricalData Called\")\r\n        getCountryHistoricalData(country)\r\n            .then(data => {\r\n                console.log(\"Promise Data: getCountryHistoricalData\", data)\r\n                // console.log(\"Promise Data: getCountryHistoricalData filter\", data.map(ele => ele.Confirmed))\r\n                // console.log(\"Promise Data: getCountryHistoricalData filter\", data.map(ele => ele.Date))\r\n                this.setState({\r\n                    ...this.state,\r\n                     historyData: data    \r\n                }, () => this.setDataToChartData())\r\n            })\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getCountryHistoricalData(this.state.selected.toLowerCase())\r\n    }\r\n\r\n    componentDidUpdate(props){\r\n        console.log(\"History Data\", this.state.historyData)\r\n        // console.log(\"*** PrevProps\", props.selectedCountry)\r\n        // console.log(\"*** NewProps\", this.props.selectedCountry)\r\n        if(props.selectedCountry !== this.props.selectedCountry){\r\n            this.setState({\r\n                ...this.state,\r\n                selected: this.props.selectedCountry\r\n            },() => this.getCountryHistoricalData(this.state.selected.toLowerCase()))\r\n        }\r\n    }\r\n\r\n    \r\n   \r\n\r\n    render() {\r\n        \r\n\r\n        console.log(\"COUNTRY CHART PROPS 2\", this.state.selected)\r\n\r\n        return (\r\n            <div className=\"country-chart\">\r\n                <Line\r\n                    data={this.state.chartData}\r\n                    options={this.state.chartOptions}\r\n                    width={800}\r\n                    height={400}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default CountryChart\r\n\r\n// historyCases: data.map(ele => ele.Confirmed),\r\n//                     historyDeaths: data.map(ele => ele.Deaths),\r\n//                     historyRecovered: data.map(ele => ele.Recovered),\r\n//                     dateLabels: data.map(ele => ele.Date.slice(0, 10))\r\n\r\n// historyCases: false,\r\n//             historyDeaths: false,\r\n//             historyRecovered: false,\r\n//             dateLabels: false","import React, { Component } from 'react'\r\nimport { getAllCountry } from '../../api/api';\r\nimport AllFigure from './AllFigures/AllFigure';\r\nimport CountrySelector from './Countries/CountrySelector';\r\nimport './CountryCount.css'\r\nimport CountryChart from './CountryChart/CountryChart';\r\n\r\n\r\nclass CountryCount extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            allCountry: false,\r\n            selected: 'Afghanistan', // selected country string\r\n            selectedCountry: {}, // selected country object\r\n            countryList: [] // all country list\r\n        }\r\n    }\r\n\r\n    countrySelectedCallbackFunction = (country) => {\r\n        console.log(\"App\", country)\r\n        const countryObj = this.state.allCountry.filter(ele => ele.country === country)\r\n        console.log(\"App\", countryObj)\r\n        this.setState({\r\n            ...this.state,\r\n            selected: country,\r\n            selectedCountry: countryObj[0]\r\n        })\r\n\r\n    }\r\n\r\n\r\n    getAllCountry() {\r\n        getAllCountry()\r\n            .then((data) => {\r\n                console.log(\"Promise Data\", data)\r\n                this.setState({\r\n                    ...this.state,\r\n                    allCountry: data,\r\n                    selectedCountry: data[0],\r\n                    countryList: data.map(ele => ele.country)\r\n                })\r\n            })\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        this.getAllCountry();\r\n    }\r\n\r\n    render() {\r\n\r\n        console.log(\"COUNTRY CHART PROPS 1\", this.state.selected)\r\n\r\n        return (\r\n            <div className=\"dashboard-wrapper\">\r\n                <div>Select Country</div>\r\n                <CountrySelector countryList={this.state.countryList}\r\n                    countrySelectedCallbackFunction={this.countrySelectedCallbackFunction} />\r\n                <div className=\"dashboard\">\r\n                    <AllFigure country={this.state.selectedCountry} />\r\n                    <CountryChart selectedCountry={this.state.selected} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CountryCount","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport WorldCount from './components/WorldCount/WorldCount';\nimport CountryCount from './components/CountryCount/CountryCount';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nclass App extends Component {\n\n\n    render() {\n\n        return (\n            <Router>\n                <Header />\n                <Switch>\n                        <Route path={process.env.PUBLIC_URL+'/'} exact  component={WorldCount} />\n                        <Route path='/country' exact component={CountryCount} />\n                </Switch>\n            </Router>\n        );\n    }\n\n\n}\n\nexport default App;\n\n\n// code for date number to date: alert(new Date(1273185387).toUTCString());\n\n/*function countrySelectedCallbackFunction(country){\n  console.log(\"App\",country)\n}\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}